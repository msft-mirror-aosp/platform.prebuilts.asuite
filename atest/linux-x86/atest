#!/usr/bin/env python
# Copyright 2020, The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function

import os
import subprocess
import sys

# Version and disclaimers.
MIN_PY3_VERSION = (3, 5)
PYTHON = 'python3'
HELPER = ('Please install python {}+ for'
          ' running the latest atest.').format(MIN_PY3_VERSION)
FALLBACK_MSG = ('[Warning] You are running a FALLBACK version of atest!'
                '\nThis fallback version of atest will be NO LONGER MAINTAINED/BUG FIXING!'
                '\n{}').format(HELPER)
DISCLAIMER_MSG = '[Warning] Outdated version of python3 detected!\n{}'.format(HELPER)
ATEST_DIR = os.path.dirname(os.path.realpath(__file__))
ATEST = os.path.join(ATEST_DIR, 'atest-py3')
FALLBACK_ATEST = os.path.join(ATEST_DIR, 'atest-py2')


def print_message(context, separator='#'):
    """A printer function with separator.

    Args:
        context: A string of context to print.
        separator: A string which will be used as separator char.
    """
    print('\n' + separator*72)
    print(context)
    print(separator*72 + '\n')


def has_valid_python3(version):
    proc = subprocess.Popen(
          [PYTHON, '-c', 'import sys; '
           'print(sys.version_info.major, sys.version_info.minor)'],
          stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, _) = proc.communicate()
    current_ver = tuple(int(x) for x in output.decode('utf-8').split())
    return current_ver >= version


def has_command(cmd):
    paths = os.getenv('PATH', '').split(':')
    for path in paths:
        if os.path.isfile(os.path.join(path, cmd)):
            return True
    return False


if __name__ == '__main__':
    if not has_command(PYTHON):
        print_message(FALLBACK_MSG)
        os.execv(FALLBACK_ATEST, sys.argv)
    else:
        # Print warning if the installed python3 doesn't meet the requirement.
        if not has_valid_python3(MIN_PY3_VERSION):
            print_message(DISCLAIMER_MSG)
        os.execv(ATEST, sys.argv)
